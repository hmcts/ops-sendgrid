parameters:
  - name: terraformVersion
    type: string
    default: "0.13.4"
  - name: sendgridEnvironments
    type: object
    default:
    - environment: nonprod
      serviceConnection: dcd-cnp-dev
      rg: mgmt-state-store-nonprod
      location: uksouth
      storage_account: mgmtstatestorenonprod
      container: mgmtstatestorecontainerdev

    - environment: prod
      serviceConnection: dcd-cnp-prod
      rg: mgmt-state-store-prod
      location: uksouth
      storage_account: mgmtstatestoreprod
      container: mgmtstatestorecontainerprod

pr:
- Integration

pool:
  name: Azure Pipelines
  demands: azureps
  vmImage: 'windows-latest'


stages:
  - ${{ each environment in parameters.sendgridEnvironments }}:
    - stage: ${{ environment.environment }}
      jobs:
        - job: TestAndPlan
          steps:     
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: ${{ parameters.terraformVersion }}

          - task: TerraformCLI@0
            displayName: Terraform initialize
            inputs:
              command: init
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              backendType: azurerm
              ensurebackend: false
              backendServiceArm: ${{ environment.serviceConnection }}
              backendAzureRmResourceGroupName: ${{ environment.rg }}
              backendAzureRmResourceGroupLocation: ${{ environment.location }}
              backendAzureRmStorageAccountName: ${{ environment.storage_account }}
              backendAzureRmStorageAccountSku: Standard_LRS
              backendAzureRmContainerName: ${{ environment.container }}
              backendAzureRmKey: SendGrid-${{ environment.environment }}/terraform.tfstate


          - ${{ if eq(false, parameters.deploy) }}:

            - task: TerraformCLI@0
              displayName: Terraform validate
              inputs:
                command: validate
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environment

            - task: TerraformCLI@0
              displayName: Terraform plan
              inputs:
                command: plan
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform
                environmentServiceName: ${{ environment.serviceConnection }}
                commandOptions: -var-file=..\config\${{ environment.environment }}.tfvars

          - ${{ if parameters.deploy }}:

            - task: TerraformCLI@0
              displayName: Terraform apply
              inputs:
                command: apply
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environment
                environmentServiceName: ${{ environment.serviceConnection }}
                commandOptions: --auto-approve -var-file=..\config\${{ environment.environment }}.tfvars